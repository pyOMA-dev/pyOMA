Using QT Designer for GUI creation with custom matplotlib plugin

Copy the following two files to '/usr/lib64/qt5/plugins/designer/python/' and make sure 'libpy3qt5.so' and 'libpyqt5.so' are already present in that directory. When starting 'designer-qt5' under Helpâ†’ About Plugins, the Matplotlib plugin should appear.

matplotlibwidget.py:

from PyQt5.QtCore import QSize
from PyQt5.QtWidgets import QSizePolicy
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as Canvas
from matplotlib.figure import Figure
from matplotlib import rcParams
 
rcParams['font.size'] = 9
 
 
class MatplotlibWidget(Canvas):
    def __init__(self, parent=None, title='', xlabel='', ylabel='',
                 xlim=None, ylim=None, xscale='linear', yscale='linear',
                 width=4, height=3, dpi=100):
        self.figure = Figure(figsize=(width, height), dpi=dpi)
        self.axes = self.figure.add_subplot(111)
        self.axes.set_title(title)
        self.axes.set_xlabel(xlabel)
        self.axes.set_ylabel(ylabel)
        if xscale is not None:
            self.axes.set_xscale(xscale)
        if yscale is not None:
            self.axes.set_yscale(yscale)
        if xlim is not None:
            self.axes.set_xlim(*xlim)
        if ylim is not None:
            self.axes.set_ylim(*ylim)
 
        super(MatplotlibWidget, self).__init__(self.figure)
        self.setParent(parent)
        super(MatplotlibWidget, self).setSizePolicy(
            QSizePolicy.Expanding, QSizePolicy.Expanding)
        super(MatplotlibWidget, self).updateGeometry()
 
    def sizeHint(self):
        return QSize(*self.get_width_height())
 
    def minimumSizeHint(self):
        return QSize(10, 10)

matplotlibplugin.py:

import os
from PyQt5.QtGui import QIcon
from PyQt5.QtDesigner import QPyDesignerCustomWidgetPlugin
from matplotlib import rcParams
from matplotlibwidget import MatplotlibWidget
 
rcParams['font.size'] = 9
 
 
class MatplotlibPlugin(QPyDesignerCustomWidgetPlugin):
    def __init__(self, parent=None):
        super(MatplotlibPlugin, self).__init__(parent)
        self._initialized = False
 
    def initialize(self, editor):
        self._initialized = True
 
    def isInitialized(self):
        return self._initialized
 
    def createWidget(self, parent):
        return MatplotlibWidget(parent)
 
    def name(self):
        return 'MatplotlibWidget'
 
    def group(self):
        return 'PyQt'
 
    def icon(self):
        return QIcon(os.path.join(
            rcParams['datapath'], 'images', 'matplotlib.png'))
 
    def toolTip(self):
        return ''
 
    def whatsThis(self):
        return ''
 
    def isContainer(self):
        return False
 
    def domXml(self):
        return '<widget class="MatplotlibWidget" name="mplwidget">\n' \
               '</widget>\n'
 
    def includeFile(self):
        return 'matplotlibwidget'

